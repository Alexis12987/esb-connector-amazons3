<!--
 ~  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~  WSO2 Inc. licenses this file to you under the Apache License,
 ~  Version 2.0 (the "License"); you may not use this file except
 ~  in compliance with the License.
 ~  You may obtain a copy of the License at
 ~
 ~    http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~  Unless required by applicable law or agreed to in writing,
 ~  software distributed under the License is distributed on an
 ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~  KIND, either express or implied.  See the License for the
 ~  specific language governing permissions and limitations
 ~  under the License.
-->
<template name="getObject" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="bucketUrl" description="End point URL of the request."/>
    <parameter name="objectName" description="The name of the object to retrieve details for."/>
    <parameter name="query" description="Query for search parameters."/>
    <parameter name="responseContentType" description="Content-Type header of the response."/>
    <parameter name="responseContentLanguage" description="Content-Language header of the response."/>
    <parameter name="responseExpires" description="Expires header of the response."/>
    <parameter name="responseCacheControl" description="Cache-Control header of the response."/>
    <parameter name="responseContentDisposition" description="Content-Disposition header of the response."/>
    <parameter name="responseContentEncoding" description="Content-Encoding header of the response"/>
    <parameter name="range" description="HTTP range header."/>
    <parameter name="ifModifiedSince" description="Return the object only if it has been modified."/>
    <parameter name="ifUnmodifiedSince" description="Return the object only if it has not been modified."/>
    <parameter name="ifMatch" description="Return the object only if its ETag is the same."/>
    <parameter name="ifNoneMatch" description="Return the object only if its ETag is not same."/>
    <sequence>
        <class name="org.wso2.carbon.connector.amazons3.auth.RemoveAmazonS3Context"/>
        <property name="uri.var.bucketUrl" expression="$func:bucketUrl"/>
        <property name="uri.var.responseContentType" expression="$func:responseContentType"/>
        <property name="uri.var.responseContentLanguage" expression="$func:responseContentLanguage"/>
        <property name="uri.var.responseExpires" expression="$func:responseExpires"/>
        <property name="uri.var.responseCacheControl" expression="$func:responseCacheControl"/>
        <property name="uri.var.responseContentDisposition" expression="$func:responseContentDisposition"/>
        <property name="uri.var.responseContentEncoding" expression="$func:responseContentEncoding"/>
        <property name="uri.var.range" expression="$func:range"/>
        <property name="uri.var.ifModifiedSince" expression="$func:ifModifiedSince"/>
        <property name="uri.var.ifUnmodifiedSince" expression="$func:ifUnmodifiedSince"/>
        <property name="uri.var.ifMatch" expression="$func:ifMatch"/>
        <property name="uri.var.ifNoneMatch" expression="$func:ifNoneMatch"/>
        <property name="uri.var.objectName" expression="$func:objectName"/>
        <property name="uri.var.uriRemainder" expression="fn:concat('/',$ctx:uri.var.objectName)"/>
        <property name="uri.var.query" value=""/>
        <!-- Authentication Header Setup -->
        <class name="org.wso2.carbon.connector.amazons3.auth.AmazonS3AuthConnector"/>
        <!-- Properties Assigned in AmazonS3AuthConnector -->
        <filter xpath="string($ctx:date) and $ctx:date != ''">
            <then>
                <property name="Date" expression="$ctx:date" scope="transport" type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:isXAmzDateValue) and $ctx:isXAmzDateValue != ''">
            <then>
                <property name="x-amz-date" expression="$ctx:isXAmzDateValue" scope="transport" type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:authenticationCode) and $ctx:authenticationCode != '' and string($ctx:uri.var.urlSign) = 'false'">
            <then>
                <property name="Authorization" expression="$ctx:authenticationCode" scope="transport" type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.range) and $ctx:uri.var.range != ''">
            <then>
                <property name="Range" expression="$ctx:uri.var.range" scope="transport" type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.ifModifiedSince) and $ctx:uri.var.ifModifiedSince != ''">
            <then>
                <property name="If-Modified-Since" expression="$ctx:uri.var.ifModifiedSince"
                          scope="transport"
                          type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.ifUnmodifiedSince) and $ctx:uri.var.ifUnmodifiedSince != ''">
            <then>
                <property name="If-Unmodified-Since" expression="$ctx:uri.var.ifUnmodifiedSince"
                          scope="transport"
                          type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.ifMatch) and $ctx:uri.var.ifMatch != ''">
            <then>
                <property name="If-Match" expression="$ctx:uri.var.ifMatch" scope="transport" type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.ifNoneMatch) and $ctx:uri.var.ifNoneMatch != ''">
            <then>
                <property name="If-None-Match" expression="$ctx:uri.var.ifNoneMatch" scope="transport"
                          type="STRING"/>
            </then>
        </filter>
        <script language="js">
            <![CDATA[
            var query = mc.getProperty('uri.var.query');
            var responseContentType = mc.getProperty('uri.var.responseContentType');
            var responseContentLanguage = mc.getProperty('uri.var.responseContentLanguage');
            var responseExpires = mc.getProperty('uri.var.responseExpires');
            var responseCacheControl = mc.getProperty('uri.var.responseCacheControl');
            var responseContentDisposition = mc.getProperty('uri.var.responseContentDisposition');
            var responseContentEncoding = mc.getProperty('uri.var.responseContentEncoding');
            if (responseContentType != null && responseContentType != "") {
                query += 'response-content-type=' + responseContentType + '&';
            }
            if (responseContentLanguage != null && responseContentLanguage != "") {
                query += 'response-content-language=' + responseContentLanguage + '&';
            }
            if (responseExpires != null && responseExpires != "") {
                query += 'response-expires=' + responseExpires + '&';
            }
            if (responseCacheControl != null && responseCacheControl != "") {
                query += 'response-cache-control=' + responseCacheControl + '&';
            }
            if (responseContentDisposition != null && responseContentDisposition != "") {
                query += 'response-content-disposition=' + responseContentDisposition + '&';
            }
            if (responseContentEncoding != null && responseContentEncoding != "") {
                query += 'response-content-encoding=' + responseContentEncoding + '&';
            }
            if (query != "") {
                query = '?' + query;
                mc.setProperty('uri.var.query' , query.toString().substring(0, query.toString().lastIndexOf("&")));
            }
        ]]>
        </script>
        <filter xpath="string($ctx:uri.var.xAmzContentSha256) and $ctx:uri.var.xAmzContentSha256 != ''">
            <then>
                <property name="x-amz-content-sha256" expression="$ctx:uri.var.xAmzContentSha256" scope="transport"
                          type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.urlSign)='true'">
            <then>
                <class name="org.wso2.carbon.connector.amazons3.auth.AmazonS3URLSignatureCreation"/>
                <call>
                    <endpoint>
                        <http method="get" uri-template="{uri.var.bucketUrl}"
                              format="pox"/>
                    </endpoint>
                </call>
            </then>
            <else>
                <call>
                    <endpoint>
                        <http method="get" uri-template="{uri.var.bucketUrl}{+uri.var.uriRemainder}{+uri.var.query}"
                              format="pox"/>
                    </endpoint>
                </call>
            </else>
        </filter>
        <!-- Remove response custom header information -->
        <header name="x-amz-id-2" scope="transport" action="remove"/>
        <header name="x-amz-request-id" scope="transport" action="remove"/>
        <header name="Via" scope="transport" action="remove"/>
        <header name="ETag" scope="transport" action="remove"/>
        <header name="Accept-Ranges" scope="transport" action="remove"/>
        <header name="Last-Modified" scope="transport" action="remove"/>
        <header name="x-amz-website-redirect-location" scope="transport" action="remove"/>
        <header name="x-amz-server-side-encryption" scope="transport" action="remove"/>
        <header name="x-amz-version-id" scope="transport" action="remove"/>
        <header name="x-amz-delete-marker" scope="transport" action="remove"/>
    </sequence>
</template>