<!--
 ~  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~  WSO2 Inc. licenses this file to you under the Apache License,
 ~  Version 2.0 (the "License"); you may not use this file except
 ~  in compliance with the License.
 ~  You may obtain a copy of the License at
 ~
 ~    http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~  Unless required by applicable law or agreed to in writing,
 ~  software distributed under the License is distributed on an
 ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~  KIND, either express or implied.  See the License for the
 ~  specific language governing permissions and limitations
 ~  under the License.
-->
<template name="getObjectMetaData" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="bucketUrl" description="End point URL of the request."/>
    <parameter name="objectName" description="The name of the object to retrieve metadata for."/>
    <parameter name="range" description="Downloads the specified range bytes of an object."/>
    <parameter name="ifModifiedSince"
               description="Return the object only if it has been modified since the specified time, otherwise return a 304."/>
    <parameter name="ifUnmodifiedSince"
               description="Return the object only if it has not been modified since the specified time, otherwise return a 412."/>
    <parameter name="ifMatch"
               description="Return the object only if its entity tag ETag is the same as the one specified; otherwise, return a 412."/>
    <parameter name="ifNoneMatch"
               description="Return the object only if its entity tag ETag is different from the one specified; otherwise, return a 304."/>
    <sequence>
        <class name="org.wso2.carbon.connector.amazons3.auth.RemoveAmazonS3Context"/>
        <property name="uri.var.bucketUrl" expression="$func:bucketUrl"/>
        <property name="uri.var.range" expression="$func:range"/>
        <property name="uri.var.ifModifiedSince" expression="$func:ifModifiedSince"/>
        <property name="uri.var.ifUnmodifiedSince" expression="$func:ifUnmodifiedSince"/>
        <property name="uri.var.ifMatch" expression="$func:ifMatch"/>
        <property name="uri.var.ifNoneMatch" expression="$func:ifNoneMatch"/>
        <property name="uri.var.objectName" expression="$func:objectName"/>
        <script language="js">
            <![CDATA[
            var encodedObjectName = encodeURIComponent(mc.getProperty('uri.var.objectName'));
                mc.setProperty('uri.var.encodedObjectName' , encodedObjectName);
        ]]>
        </script>
        <property name="uri.var.uriRemainder" expression="fn:concat('/',$ctx:uri.var.encodedObjectName)"/>
        <!-- Authentication Header Setup -->
        <class name="org.wso2.carbon.connector.amazons3.auth.AmazonS3AuthConnector"/>
        <filter xpath="string($ctx:date) and $ctx:date != ''">
            <then>
                <property name="Date" expression="$ctx:date" scope="transport" type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:isXAmzDateValue) and $ctx:isXAmzDateValue != ''">
            <then>
                <property name="x-amz-date" expression="$ctx:isXAmzDateValue" scope="transport"
                          type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:authenticationCode) and $ctx:authenticationCode != ''">
            <then>
                <property name="Authorization" expression="$ctx:authenticationCode" scope="transport" type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.range) and $ctx:uri.var.range != ''">
            <then>
                <property name="Range" expression="$ctx:uri.var.range" scope="transport" type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.ifModifiedSince) and $ctx:uri.var.ifModifiedSince != ''">
            <then>
                <property name="If-Modified-Since" expression="$ctx:uri.var.ifModifiedSince" scope="transport"
                          type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.ifUnmodifiedSince) and $ctx:uri.var.ifUnmodifiedSince != ''">
            <then>
                <property name="If-Unmodified-Since" expression="$ctx:uri.var.ifUnmodifiedSince" scope="transport"
                          type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.ifMatch) and $ctx:uri.var.ifMatch != ''">
            <then>
                <property name="If-Match" expression="$ctx:uri.var.ifMatch" scope="transport" type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.ifNoneMatch) and $ctx:uri.var.ifNoneMatch != ''">
            <then>
                <property name="If-None-Match" expression="$ctx:uri.var.ifNoneMatch" scope="transport" type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.xAmzContentSha256) and $ctx:uri.var.xAmzContentSha256 != ''">
            <then>
                <property name="x-amz-content-sha256" expression="$ctx:uri.var.xAmzContentSha256" scope="transport"
                          type="STRING"/>
            </then>
        </filter>
        <call>
            <endpoint>
                <http method="head" uri-template="{uri.var.bucketUrl}/{+uri.var.objectName}"/>
            </endpoint>
        </call>
        <!-- Remove response custom header information -->
        <header name="x-amz-id-2" scope="transport" action="remove"/>
        <header name="x-amz-request-id" scope="transport" action="remove"/>
        <header name="Via" scope="transport" action="remove"/>
        <header name="ETag" scope="transport" action="remove"/>
    </sequence>
</template>