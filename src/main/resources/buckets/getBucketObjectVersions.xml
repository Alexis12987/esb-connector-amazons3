<!--
 ~  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~  WSO2 Inc. licenses this file to you under the Apache License,
 ~  Version 2.0 (the "License"); you may not use this file except
 ~  in compliance with the License.
 ~  You may obtain a copy of the License at
 ~
 ~    http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~  Unless required by applicable law or agreed to in writing,
 ~  software distributed under the License is distributed on an
 ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~  KIND, either express or implied.  See the License for the
 ~  specific language governing permissions and limitations
 ~  under the License.
-->
<template name="getBucketObjectVersions" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="bucketUrl" description="End point URL of the request."/>
    <parameter name="delimiter" description="Character that specify to group keys"/>
    <parameter name="encodingType"
               description="Requests Amazon S3 to encode the response and specifies the encoding method to use"/>
    <parameter name="keyMarker" description="Specifies the key in the bucket that you want to start listing from"/>
    <parameter name="maxKeys" description="Sets the maximum number of keys returned in the response body"/>
    <parameter name="prefix" description="Parameter to select only those keys that begin with the specified prefix"/>
    <parameter name="versionIdMarker" description="Specifies the object version you want to start listing from"/>
    <sequence>
        <class name="org.wso2.carbon.connector.amazons3.auth.RemoveAmazonS3Context"/>
        <property name="uri.var.bucketUrl" expression="$func:bucketUrl"/>
        <property name="uri.var.delimiter" expression="$func:delimiter"/>
        <property name="uri.var.encodingType" expression="$func:encodingType"/>
        <property name="uri.var.keyMarker" expression="$func:keyMarker"/>
        <property name="uri.var.maxKeys" expression="$func:maxKeys"/>
        <property name="uri.var.prefix" expression="$func:prefix"/>
        <property name="uri.var.versionIdMarker" expression="$func:versionIdMarker"/>
        <property name="uri.var.queryString" value="versions"/>
        <property name="uri.var.query" value=""/>
        <!-- Authentication Header Setup -->
        <class name="org.wso2.carbon.connector.amazons3.auth.AmazonS3AuthConnector"/>
        <!-- Properties assigned in AmazonS3AuthConnector -->
        <filter xpath="string($ctx:date) and $ctx:date != ''">
            <then>
                <property name="Date" expression="$ctx:date" scope="transport" type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:isXAmzDateValue) and $ctx:isXAmzDateValue != ''">
            <then>
                <property name="x-amz-date" expression="$ctx:isXAmzDateValue" scope="transport" type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:authenticationCode) and $ctx:authenticationCode != ''">
            <then>
                <property name="Authorization" expression="$ctx:authenticationCode" scope="transport" type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.xAmzContentSha256) and $ctx:uri.var.xAmzContentSha256 != ''">
            <then>
                <property name="x-amz-content-sha256" expression="$ctx:uri.var.xAmzContentSha256" scope="transport"
                          type="STRING"/>
            </then>
        </filter>
            <script language="js">
                <![CDATA[
                var queryString=mc.getProperty('uri.var.queryString');
                var query=mc.getProperty('uri.var.query');
                var delimiter=mc.getProperty('uri.var.delimiter');
                var encodingType=mc.getProperty('uri.var.encodingType');
                var keyMarker=mc.getProperty('uri.var.keyMarker');
                var maxKeys=mc.getProperty('uri.var.maxKeys');
                var prefix=mc.getProperty('uri.var.prefix');
                var versionIdMarker=mc.getProperty('uri.var.versionIdMarker');
                if (delimiter != null && delimiter != "") {
                   query += 'delimiter=' + delimiter + '&';
                }
                if (encodingType != null && encodingType != "") {
                   query += 'encoding-type=' + encodingType + '&';
                }
                if (maxKeys != null && maxKeys != "") {
                   query += 'max-keys=' + maxKeys + '&';
                }
                if (keyMarker != null && keyMarker != "") {
                   query += 'key-marker=' + keyMarker + '&';
                }
                if (prefix != null && prefix != "") {
                    query += 'prefix=' + prefix + '&';
                }
                if (versionIdMarker != null && versionIdMarker != "") {
                    query += 'version-id-marker=' + versionIdMarker + '&';
                }
                if (query != "") {
                    query = '?' + queryString + '&' + query;
                    mc.setProperty('uri.var.query' , query.toString().substring(0, query.toString().lastIndexOf("&")));
                } else {
                    query = '?' + queryString;
                    mc.setProperty('uri.var.query' , query.toString());
                }
            ]]>
            </script>
        <call>
            <endpoint>
                <http method="get" uri-template="{uri.var.bucketUrl}{+uri.var.uriRemainder}{+uri.var.query}"/>
            </endpoint>
        </call>
        <!-- Remove response custom header information -->
        <header name="x-amz-id-2" scope="transport" action="remove"/>
        <header name="x-amz-request-id" scope="transport" action="remove"/>
        <header name="Via" scope="transport" action="remove"/>
    </sequence>
</template>