<!--
 ~  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~  WSO2 Inc. licenses this file to you under the Apache License,
 ~  Version 2.0 (the "License"); you may not use this file except
 ~  in compliance with the License.
 ~  You may obtain a copy of the License at
 ~
 ~    http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~  Unless required by applicable law or agreed to in writing,
 ~  software distributed under the License is distributed on an
 ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~  KIND, either express or implied.  See the License for the
 ~  specific language governing permissions and limitations
 ~  under the License.
-->
<template name="init" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="accessKeyId" description="AWS access key ID."/>
    <parameter name="secretAccessKey" description="AWS secret access key."/>
    <parameter name="privateKeyFilePath" description="Path of AWS private Key File."/>
    <parameter name="keyPairId" description="Key pair Id of AWS cloud Front."/>
    <parameter name="policyType" description="Policy for the URL signing. It can be custom or canned policy."/>
    <parameter name="urlSign" description="Specify whether to create Signed URL or not. It can be true or false."/>
    <parameter name="dateLessThan" description="Can access the object before this specific date only."/>
    <parameter name="dateGreaterThan" description="Can access the object before this specific date only."/>
    <parameter name="ipAddress" description="IP address for creating Policy."/>
    <parameter name="methodType" description="Type of the HTTP method."/>
    <parameter name="contentLength" description="Length of the message without the headers according to RFC 2616."/>
    <parameter name="contentType"
               description="The content type of the resource in case the request content in the body."/>
    <parameter name="addCharset" description="To add the char set to ContentType header."/>
    <parameter name="contentMD5"
               description="Base64 encoded 128-bit MD5 digest of the message without the headers according to RFC 1864."/>
    <parameter name="expect"
               description="This header can be used only if a body is sent to not to send the request body until it recieves an acknowledgment."/>
    <parameter name="host"
               description="For path-style requests, the value is s3.amazonaws.com. For virtual-style requests, the value is BucketName.s3.amazonaws.com."/>
    <parameter name="isXAmzDate" description="The current date and time according to the requester."/>
    <parameter name="xAmzSecurityToken"
               description="The security token based on whether using Amazon DevPay operations or temporary security credentials."/>
    <parameter name="bucketName" description="Name of the bucket require."/>
    <parameter name="xAmzAcl" description="Sets the ACL of the bucket using the specified canned ACL."/>
    <parameter name="xAmzGrantRead"
               description="Allows the specified grantee or grantees to list the objects in the bucket."/>
    <parameter name="xAmzGrantWrite"
               description="Allows the specified grantee or grantees to create, overwrite, and delete any object in the bucket."/>
    <parameter name="xAmzGrantReadAcp" description="Allows the specified grantee or grantees to read the bucket ACL."/>
    <parameter name="xAmzGrantWriteAcp"
               description="Allows the specified grantee or grantees to write the ACL for the applicable bucket."/>
    <parameter name="xAmzGrantFullControl"
               description="Allows the specified grantee or grantees the READ, WRITE, READ_ACP, and WRITE_ACP permissions on the bucket."/>
    <parameter name="xAmzMeta" description="Field names prefixed with x-amz-meta- contain user-specified metadata."/>
    <parameter name="xAmzServeEncryption"
               description="Specifies server-side encryption algorithm to use when Amazon S3 creates an object."/>
    <parameter name="xAmzStorageClass" description="Storage class to use for storing the object."/>
    <parameter name="xAmzWebsiteLocation"
               description="Amazon S3 stores the value of this header in the object metadata."/>
    <parameter name="xAmzMfa"
               description="The value is the concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device."/>
    <parameter name="xAmzCopySource"
               description="The name of the source bucket and key name of the source object, separated by a slash."/>
    <parameter name="xAmzCopySourceRange" description="The range of bytes to copy from the source object."/>
    <parameter name="xAmzMetadataDirective"
               description="Specifies whether the metadata is copied from the source object or replaced with metadata provided in the request."/>
    <parameter name="xAmzCopySourceIfMatch"
               description="Copies the object if its entity tag (ETag) matches the specified tag."/>
    <parameter name="xAmzCopySourceIfNoneMatch"
               description="Copies the object if its entity tag (ETag) is different than the specified ETag."/>
    <parameter name="xAmzCopySourceIfUnmodifiedSince"
               description="Copies the object if it hasn't been modified since the specified time."/>
    <parameter name="xAmzCopySourceIfModifiedSince"
               description="Copies the object if it has been modified since the specified time."/>
    <parameter name="xAmzServerSideEncryption"
               description="Specifies the server-side encryption algorithm to use when Amazon S3 creates the target object."/>
    <parameter name="uriRemainder" description="This specifies remainder of the request URL."/>
    <sequence>
        <property name="uri.var.accessKeyId" expression="$func:accessKeyId"/>
        <property name="uri.var.secretAccessKey" expression="$func:secretAccessKey"/>
        <property name="uri.var.privateKeyFilePath" expression="$func:privateKeyFilePath"/>
        <property name="uri.var.keyPairId" expression="$func:keyPairId"/>
        <property name="uri.var.dateLessThan" expression="$func:dateLessThan"/>
        <property name="uri.var.dateGreaterThan" expression="$func:dateGreaterThan"/>
        <property name="uri.var.ipAddress" expression="$func:ipAddress"/>
        <property name="uri.var.policyType" expression="$func:policyType"/>
        <property name="uri.var.urlSign" expression="$func:urlSign"/>
        <property name="uri.var.methodType" expression="$func:methodType"/>
        <property name="uri.var.contentLength" expression="$func:contentLength"/>
        <property name="uri.var.contentType" expression="$func:contentType"/>
        <property name="uri.var.addCharset" expression="$func:addCharset"/>
        <property name="uri.var.contentMD5" expression="$func:contentMD5"/>
        <property name="uri.var.expect" expression="$func:expect"/>
        <property name="uri.var.host" expression="$func:host"/>
        <property name="uri.var.isXAmzDate" expression="$func:isXAmzDate"/>
        <property name="uri.var.xAmzSecurityToken" expression="$func:xAmzSecurityToken"/>
        <property name="uri.var.bucketName" expression="$func:bucketName"/>
        <property name="uri.var.xAmzAcl" expression="$func:xAmzAcl"/>
        <property name="uri.var.xAmzGrantRead" expression="$func:xAmzGrantRead"/>
        <property name="uri.var.xAmzGrantWrite" expression="$func:xAmzGrantWrite"/>
        <property name="uri.var.xAmzGrantReadAcp" expression="$func:xAmzGrantReadAcp"/>
        <property name="uri.var.xAmzGrantWriteAcp" expression="$func:xAmzGrantWriteAcp"/>
        <property name="uri.var.xAmzGrantFullControl" expression="$func:xAmzGrantFullControl"/>
        <property name="uri.var.xAmzMeta" expression="$func:xAmzMeta"/>
        <property name="uri.var.xAmzServeEncryption" expression="$func:xAmzServeEncryption"/>
        <property name="uri.var.xAmzStorageClass" expression="$func:xAmzStorageClass"/>
        <property name="uri.var.xAmzWebsiteLocation" expression="$func:xAmzWebsiteLocation"/>
        <property name="uri.var.xAmzMfa" expression="$func:xAmzMfa"/>
        <property name="uri.var.xAmzCopySource" expression="$func:xAmzCopySource"/>
        <property name="uri.var.xAmzCopySourceRange" expression="$func:xAmzCopySourceRange"/>
        <property name="uri.var.xAmzMetadataDirective" expression="$func:xAmzMetadataDirective"/>
        <property name="uri.var.xAmzCopySourceIfMatch" expression="$func:xAmzCopySourceIfMatch"/>
        <property name="uri.var.xAmzCopySourceIfNoneMatch" expression="$func:xAmzCopySourceIfNoneMatch"/>
        <property name="uri.var.xAmzCopySourceIfUnmodifiedSince" expression="$func:xAmzCopySourceIfUnmodifiedSince"/>
        <property name="uri.var.xAmzCopySourceIfModifiedSince" expression="$func:xAmzCopySourceIfModifiedSince"/>
        <property name="uri.var.uriRemainder" expression="$func:uriRemainder"/>
        <header name="Content-Type" scope="transport" expression="$ctx:uri.var.contentType"/>
        <property name="messageType" expression="$ctx:uri.var.contentType" scope="axis2"/>
        <filter xpath="string($ctx:uri.var.urlSign) or $ctx:uri.var.urlSign != ''">
            <then>
                <property name="uri.var.urlSign" expression="$ctx:uri.var.urlSign"/>
            </then>
            <else>
                <property name="uri.var.urlSign" value="false"/>
            </else>
        </filter>
        <filter xpath="string($ctx:uri.var.addCharset) or $ctx:uri.var.addCharset != ''">
            <then>
                <property name="uri.var.addCharset" expression="$ctx:uri.var.addCharset"/>
            </then>
            <else>
                <property name="uri.var.addCharset" value="false"/>
            </else>
        </filter>
        <!-- InitAclHeaders Setup -->
        <filter xpath="string($ctx:uri.var.xAmzAcl) or $ctx:uri.var.xAmzAcl != ''">
            <then>
                <property name="x-amz-acl" expression="$ctx:uri.var.xAmzAcl" scope="transport" type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.xAmzGrantRead) or $ctx:uri.var.xAmzGrantRead != ''">
            <then>
                <property name="x-amz-grant-read" expression="$ctx:uri.var.xAmzGrantRead" scope="transport"
                          type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.xAmzGrantWrite) or $ctx:uri.var.xAmzGrantWrite != ''">
            <then>
                <property name="x-amz-grant-write" expression="$ctx:uri.var.xAmzGrantWrite" scope="transport"
                          type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.xAmzGrantReadAcp) or $ctx:uri.var.xAmzGrantReadAcp != ''">
            <then>
                <property name="x-amz-grant-read-acp" expression="$ctx:uri.var.xAmzGrantReadAcp" scope="transport"
                          type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.xAmzGrantWriteAcp) or $ctx:uri.var.xAmzGrantWriteAcp != ''">
            <then>
                <property name="x-amz-grant-write-acp" expression="$ctx:uri.var.xAmzGrantWriteAcp" scope="transport"
                          type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.xAmzGrantFullControl) or $ctx:uri.var.xAmzGrantFullControl != ''">
            <then>
                <property name="x-amz-grant-full-control" expression="$ctx:uri.var.xAmzGrantFullControl"
                          scope="transport" type="STRING"/>
            </then>
        </filter>
        <!-- InitCommonHeaders Setup -->
        <filter xpath="string($ctx:uri.var.contentLength) or $ctx:uri.var.contentLength != ''">
            <then>
                <property name="Content-Length" expression="$ctx:uri.var.contentLength" scope="transport" type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.contentType) or $ctx:uri.var.contentType != ''">
            <then>
                <property name="Content-Type" expression="$ctx:uri.var.contentType" scope="transport" type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.contentMD5) or $ctx:uri.var.contentMD5 != ''">
            <then>
                <property name="Content-MD5" expression="$ctx:uri.var.contentMD5" scope="transport" type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.expect) or $ctx:uri.var.expect != ''">
            <then>
                <property name="Expect" expression="$ctx:uri.var.expect" scope="transport" type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.host) or $ctx:uri.var.host != ''">
            <then>
                <property name="Host" expression="$ctx:uri.var.host" scope="transport" type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.xAmzSecurityToken) or $ctx:uri.var.xAmzSecurityToken != ''">
            <then>
                <property name="x-amz-security-token" expression="$ctx:uri.var.xAmzSecurityToken" scope="transport"
                          type="STRING"/>
            </then>
        </filter>
        <!-- InitPutObjectHeaders Setup -->
        <filter xpath="string($ctx:uri.var.cacheControl) or $ctx:uri.var.cacheControl != ''">
            <then>
                <property name="Cache-Control" expression="$ctx:uri.var.cacheControl" scope="transport" type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.contentDisposition) or $ctx:uri.var.contentDisposition != ''">
            <then>
                <property name="Content-Disposition" expression="$ctx:uri.var.contentDisposition" scope="transport"
                          type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.contentEncoding) or $ctx:uri.var.contentEncoding != ''">
            <then>
                <property name="Content-Encoding" expression="$ctx:uri.var.contentEncoding" scope="transport"
                          type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.expires) or $ctx:uri.var.expires != ''">
            <then>
                <property name="Expires" expression="$ctx:uri.var.expires" scope="transport" type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.xAmzMeta) or $ctx:uri.var.xAmzMeta != ''">
            <then>
                <property name="x-amz-meta-" expression="$ctx:uri.var.xAmzMeta" scope="transport" type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.xAmzServeEncryption) or $ctx:uri.var.xAmzServeEncryption != ''">
            <then>
                <property name="x-amz-server-side-encryption" expression="$ctx:uri.var.xAmzServeEncryption"
                          scope="transport" type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.xAmzStorageClass) or $ctx:uri.var.xAmzStorageClass != ''">
            <then>
                <property name="x-amz-storage-class" expression="$ctx:uri.var.xAmzStorageClass" scope="transport"
                          type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.xAmzWebsiteLocation) or $ctx:uri.var.xAmzWebsiteLocation != ''">
            <then>
                <property name="x-amz-website-redirect-location" expression="$ctx:uri.var.xAmzWebsiteLocation"
                          scope="transport" type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.xAmzCopySource) and $ctx:uri.var.xAmzCopySource != ''">
            <then>
                <property name="x-amz-copy-source" expression="$ctx:uri.var.xAmzCopySource" scope="transport"
                          type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.xAmzCopySourceRange) and $ctx:uri.var.xAmzCopySourceRange != ''">
            <then>
                <property name="x-amz-copy-source-range" expression="$ctx:uri.var.xAmzCopySourceRange" scope="transport"
                          type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.xAmzCopySourceIfMatch) and $ctx:uri.var.xAmzCopySourceIfMatch != ''">
            <then>
                <property name="x-amz-copy-source-if-match" expression="$ctx:uri.var.xAmzCopySourceIfMatch"
                          scope="transport" type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.xAmzCopySourceIfNoneMatch) and $ctx:uri.var.xAmzCopySourceIfNoneMatch != ''">
            <then>
                <property name="x-amz-copy-source-if-none-match" expression="$ctx:uri.var.xAmzCopySourceIfNoneMatch"
                          scope="transport" type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.xAmzCopySourceIfUnmodifiedSince) and $ctx:uri.var.xAmzCopySourceIfUnmodifiedSince != ''">
            <then>
                <property name="x-amz-copy-source-if-unmodified-since"
                          expression="$ctx:uri.var.xAmzCopySourceIfUnmodifiedSince" scope="transport" type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.xAmzCopySourceIfModifiedSince) and $ctx:uri.var.xAmzCopySourceIfModifiedSince != ''">
            <then>
                <property name="x-amz-copy-source-if-modified-since"
                          expression="$ctx:uri.var.xAmzCopySourceIfModifiedSince" scope="transport" type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.xAmzMetadataDirective) and $ctx:uri.var.xAmzMetadataDirective != ''">
            <then>
                <property name="x-amz-metadata-directive" expression="$ctx:uri.var.xAmzMetadataDirective"
                          scope="transport" type="STRING"/>
            </then>
        </filter>
    </sequence>
</template>