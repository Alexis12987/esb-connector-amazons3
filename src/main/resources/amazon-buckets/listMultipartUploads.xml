<!--
 ~  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~  WSO2 Inc. licenses this file to you under the Apache License,
 ~  Version 2.0 (the "License"); you may not use this file except
 ~  in compliance with the License.
 ~  You may obtain a copy of the License at
 ~
 ~    http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~  Unless required by applicable law or agreed to in writing,
 ~  software distributed under the License is distributed on an
 ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~  KIND, either express or implied.  See the License for the
 ~  specific language governing permissions and limitations
 ~  under the License.
-->
<template name="listMultipartUploads" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="bucketUrl" description="End point URL of the request."/>
    <parameter name="delimiter" description="Character use to group keys."/>
    <parameter name="encodingType" description="Encode the response and specifies the encoding method to use."/>
    <parameter name="maxUploads" description="Number of uploads that can be returned in a response."/>
    <parameter name="keyMarker" description="Specifies the multipart upload after which listing should begin."/>
    <parameter name="prefix"
               description="Lists in-progress uploads only for those keys that begin with the specified prefix."/>
    <parameter name="uploadIdMarker" description="Specifies the multipart upload after which listing should begin."/>
    <sequence>
        <property name="uri.var.bucketUrl" expression="$func:bucketUrl"/>
        <property name="uri.var.delimiter" expression="$func:delimiter"/>
        <property name="uri.var.encodingType" expression="$func:encodingType"/>
        <property name="uri.var.maxUploads" expression="$func:maxUploads"/>
        <property name="uri.var.keyMarker" expression="$func:keyMarker"/>
        <property name="uri.var.prefix" expression="$func:prefix"/>
        <property name="uri.var.uploadIdMarker" expression="$func:uploadIdMarker"/>
        <!-- Authentication Header Setup -->
        <property name="uri.var.uriRemainder" value="/?uploads"/>
        <property name="uri.var.query" value="&amp;"/>
        <class name="org.wso2.carbon.connector.amazons3.auth.AmazonS3AuthConnector"/>
        <!-- Properties Assigned in AmazonS3AuthConnector -->
        <filter xpath="string($ctx:date) and $ctx:date != ''">
            <then>
                <property name="Date" expression="$ctx:date" scope="transport" type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:isXAmzDateValue) and $ctx:isXAmzDateValue != ''">
            <then>
                <property name="x-amz-date" expression="$ctx:isXAmzDateValue" scope="transport" type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:authenticationCode) and $ctx:authenticationCode != ''">
            <then>
                <property name="Authorization" expression="$ctx:authenticationCode" scope="transport" type="STRING"/>
            </then>
        </filter>
        <!-- Building Custom Query -->
        <filter xpath="string($ctx:uri.var.delimiter) and $ctx:uri.var.delimiter != ''">
            <then>
                <property name="uri.var.query"
                          expression="fn:concat($ctx:uri.var.query,'&amp;','delimiter=',$ctx:uri.var.delimiter)"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.encodingType) and $ctx:uri.var.encodingType != ''">
            <then>
                <property name="uri.var.query"
                          expression="fn:concat($ctx:uri.var.query,'&amp;','encoding-type=',$ctx:uri.var.encodingType)"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.maxUploads) and $ctx:uri.var.maxUploads != ''">
            <then>
                <property name="uri.var.query"
                          expression="fn:concat($ctx:uri.var.query,'&amp;','max-uploads=',$ctx:uri.var.maxUploads)"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.keyMarker) and $ctx:uri.var.keyMarker != ''">
            <then>
                <property name="uri.var.query"
                          expression="fn:concat($ctx:uri.var.query,'&amp;','key-marker=',$ctx:uri.var.keyMarker)"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.prefix) and $ctx:uri.var.prefix != ''">
            <then>
                <property name="uri.var.query"
                          expression="fn:concat($ctx:uri.var.query,'&amp;','prefix=',$ctx:uri.var.prefix)"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.uploadIdMarker) and $ctx:uri.var.uploadIdMarker != ''">
            <then>
                <property name="uri.var.query"
                          expression="fn:concat($ctx:uri.var.query,'&amp;','upload-id-marker=',$ctx:uri.var.uploadIdMarker)"/>
            </then>
        </filter>
        <call>
            <endpoint>
                <http method="get" uri-template="{uri.var.bucketUrl}{+uri.var.uriRemainder}{+uri.var.query}"/>
            </endpoint>
        </call>
        <!-- Remove response custom header information -->
        <header name="x-amz-id-2" scope="transport" action="remove"/>
        <header name="x-amz-request-id" scope="transport" action="remove"/>
        <header name="Via" scope="transport" action="remove"/>
    </sequence>
</template>