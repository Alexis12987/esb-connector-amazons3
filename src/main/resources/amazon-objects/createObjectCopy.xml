<!--
 ~  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~  WSO2 Inc. licenses this file to you under the Apache License,
 ~  Version 2.0 (the "License"); you may not use this file except
 ~  in compliance with the License.
 ~  You may obtain a copy of the License at
 ~
 ~    http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~  Unless required by applicable law or agreed to in writing,
 ~  software distributed under the License is distributed on an
 ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~  KIND, either express or implied.  See the License for the
 ~  specific language governing permissions and limitations
 ~  under the License.
-->
<template name="createObjectCopy" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="bucketUrl" description="End point URL of the request."/>
    <parameter name="destinationObject" description="The name for the destination object to create after copying."/>
    <sequence>
        <property name="uri.var.bucketUrl" expression="$func:bucketUrl"/>
        <property name="uri.var.destinationObject" expression="$func:destinationObject"/>
        <property name="uri.var.uriRemainder" expression="fn:concat('/',$ctx:uri.var.destinationObject)"/>
        <!-- Authentication Header Setup -->
        <class name="org.wso2.carbon.connector.amazons3.auth.AmazonS3AuthConnector"/>
        <filter xpath="string($ctx:date) and $ctx:date != ''">
            <then>
                <property name="Date" expression="$ctx:date" scope="transport" type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:isXAmzDateValue) and $ctx:isXAmzDateValue != ''">
            <then>
                <property name="x-amz-date" expression="$ctx:isXAmzDateValue" scope="transport"
                          type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:authenticationCode) and $ctx:authenticationCode != ''">
            <then>
                <property name="Authorization" expression="$ctx:authenticationCode" scope="transport"
                          type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.xAmzCopySource) and $ctx:uri.var.xAmzCopySource != ''">
            <then>
                <property name="x-amz-copy-source" expression="$ctx:uri.var.xAmzCopySource"
                          scope="transport" type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.xAmzMetadataDirective) and $ctx:uri.var.xAmzMetadataDirective != ''">
            <then>
                <property name="x-amz-metadata-directive" expression="$ctx:uri.var.xAmzMetadataDirective"
                          scope="transport" type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.xAmzCopySourceIfMatch) and $ctx:uri.var.xAmzCopySourceIfMatch != ''">
            <then>
                <property name="x-amz-copy-source-if-match" expression="$ctx:uri.var.xAmzCopySourceIfMatch"
                          scope="transport" type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.xAmzCopySourceIfNoneMatch) and $ctx:uri.var.xAmzCopySourceIfNoneMatch != ''">
            <then>
                <property name="x-amz-copy-source-if-none-match"
                          expression="$ctx:uri.var.xAmzCopySourceIfNoneMatch"
                          scope="transport" type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.xAmzCopySourceIfUnmodifiedSince) and $ctx:uri.var.xAmzCopySourceIfUnmodifiedSince != ''">
            <then>
                <property name="x-amz-copy-source-if-unmodified-since"
                          expression="$ctx:uri.var.xAmzCopySourceIfUnmodifiedSince"
                          scope="transport" type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.xAmzCopySourceIfModifiedSince) and $ctx:uri.var.xAmzCopySourceIfModifiedSince != ''">
            <then>
                <property name="x-amz-copy-source-if-modified-since"
                          expression="$ctx:uri.var.xAmzCopySourceIfModifiedSince"
                          scope="transport" type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.xAmzServeEncryptionValue) and $ctx:uri.var.xAmzServeEncryptionValue != ''">
            <then>
                <property name="x-amz-server-side-encryption"
                          expression="$ctx:uri.var.xAmzServeEncryptionValue"
                          scope="transport" type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.xAmzStorageClassValue) and $ctx:uri.var.xAmzStorageClassValue != ''">
            <then>
                <property name="x-amz-storage-class" expression="$ctx:uri.var.xAmzStorageClassValue"
                          scope="transport" type="STRING"/>
            </then>
        </filter>
        <filter xpath="string($ctx:uri.var.xAmzWebsiteLocationValue) and $ctx:uri.var.xAmzWebsiteLocationValue != ''">
            <then>
                <property name="x-amz-website-redirect-location"
                          expression="$ctx:uri.var.xAmzWebsiteLocationValue" scope="transport"
                          type="STRING"/>
            </then>
        </filter>
        <!-- Send Empty Message Body -->
        <payloadFactory media-type="xml">
            <format>
                <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
                    <soapenv:Header/>
                    <soapenv:Body/>
                </soapenv:Envelope>
            </format>
            <args/>
        </payloadFactory>
        <property name="FORCE_POST_PUT_NOBODY" value="true" scope="axis2" type="BOOLEAN"/>
        <property name="NO_ENTITY_BODY" value="true" type="BOOLEAN" scope="axis2"/>
        <call>
            <endpoint>
                <http method="put" uri-template="{uri.var.bucketUrl}{+uri.var.uriRemainder}"/>
            </endpoint>
        </call>
        <!-- Remove response custom header information -->
        <header name="x-amz-id-2" scope="transport" action="remove"/>
        <header name="x-amz-request-id" scope="transport" action="remove"/>
        <header name="x-amz-copy-source-version-id" scope="transport" action="remove"/>
        <header name="x-amz-version-id" scope="transport" action="remove"/>
        <header name="Via" scope="transport" action="remove"/>
    </sequence>
</template>